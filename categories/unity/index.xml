<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Antonio Moon´s</title>
    <link>https://moonantonio.github.io/categories/unity/</link>
    <description>Recent content in Unity on Antonio Moon´s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Fri, 03 May 2019 02:02:45 +0200</lastBuildDate>
    
	<atom:link href="https://moonantonio.github.io/categories/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Uso de GUISkin para el estilo del editor</title>
      <link>https://moonantonio.github.io/post/2019/dev/004/</link>
      <pubDate>Fri, 03 May 2019 02:02:45 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2019/dev/004/</guid>
      <description>Al crear ventanas del editor de Unity con barras de herramientas, es posible que haya visto un par de formas diferentes de trabajar con los estilos de la barra de herramientas. Muchos de los ejemplos online o en paquetes de tiendas de activos crean estilos en código que ciertamente funcionan. Sin embargo, no he visto muchos ejemplos usando GUISkin para crear una GUI en el editor, así que pensé en compartir lo que aprendí experimentando con este método.</description>
    </item>
    
    <item>
      <title>Personalizando nuestro editor a nuestro gusto - Unity</title>
      <link>https://moonantonio.github.io/post/2019/dev/001/</link>
      <pubDate>Thu, 24 Jan 2019 13:28:38 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2019/dev/001/</guid>
      <description>Un CustomEditor nos permite cambiar la representación visual de nuestras clases en el Unity Inspector. Hace más sencillo interactuar con las script classes asociadas a Gameobjects, prefabs, etc…

Nuestro primer paso es crear una carpeta con el nombre Editor. Para Unity es un nombre de carpeta muy especial, Unity carga automaticamente todos los scripts que modifican el comportamiento del UnityEditor desde esta carpeta. Estos scripts NO serán incluidos en el empaquetado final del juego, solo serán usado por el UnityEditor.</description>
    </item>
    
    <item>
      <title>Unity Shader de acumulacion</title>
      <link>https://moonantonio.github.io/post/2018/dev/013/</link>
      <pubDate>Thu, 18 Oct 2018 03:42:27 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/013/</guid>
      <description>¿Te has preguntado cuánto tiempo se tarda en aplicar nieve a todas las texturas de tu juego? Probablemente muchas veces. Me gustaría mostrarle cómo crear un efecto de imagen (sombreado de espacio de pantalla) que cambiará inmediatamente la temporada de su escena en Unity.

¿Como funciona? En las imágenes de arriba puedes ver dos capturas de pantalla que presentan la misma escena. La única diferencia es que en el segundo habilité el efecto de nieve en la cámara.</description>
    </item>
    
    <item>
      <title>Unity Profiler - Optimización</title>
      <link>https://moonantonio.github.io/post/2018/dev/012/</link>
      <pubDate>Thu, 18 Oct 2018 00:38:12 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/012/</guid>
      <description>Hablamos sobre cómo usar Unity Profiler para inspeccionar cuántos lotes se hacen realmente. Ahora vamos a hablar un poco más sobre el propio Profiler . Si ya lo sabes, puedes aprender algo nuevo.
Profiler La idea detrás del Profiler es proporcionar la mayor cantidad de tiempo, memoria, estadística e información posible. Puedes aprender:
 Cuánto tiempo necesita tu juego para calcular y renderizar un frame ¿Qué lleva tanto tiempo? (scripts, física, gráficos, etc.</description>
    </item>
    
    <item>
      <title>Localización usando .PO</title>
      <link>https://moonantonio.github.io/post/2018/dev/011/</link>
      <pubDate>Tue, 25 Sep 2018 19:26:11 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/011/</guid>
      <description>Traducir un juego a múltiples idiomas es una forma muy efectiva de exponerlo a nuevas audiencias. Sin embargo, puede convertirse en un verdadero dolor de cabeza si no lo hace de forma extensible y mantenible. Un sistema .po es una gran manera de administrar traducciones, y es un sistema útil para saber más que solo juegos. Analizaré formas en que puede ampliar el sistema para que sea más robusto, pero la mayoría de los detalles de estos dependen demasiado de su configuración para ser detallados por completo.</description>
    </item>
    
    <item>
      <title>¡Consejos esenciales de Gamedev &amp; Unity!</title>
      <link>https://moonantonio.github.io/post/2018/dev/010/</link>
      <pubDate>Mon, 10 Sep 2018 14:00:03 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/010/</guid>
      <description>¿Quieres saber cómo aprender rápidamente la programación de videojuegos?
Solo haz juegos.
 Aquí hay algunos consejos para ayudarlo en el camino:
1. No reinventar la rueda, use las herramientas incorporadas del motor Al trabajar en cualquier motor, como Unity o Unreal Engine, algunos desarrolladores, principalmente provenientes de un campo de ciencias de la computación, pueden tener tendencia a inclinarse y comenzar a trabajar en algoritmos o estructuras enormes sin saber si ya existen en el motor.</description>
    </item>
    
    <item>
      <title>Unity : Aseprite Workflow</title>
      <link>https://moonantonio.github.io/post/2018/dev/009/</link>
      <pubDate>Wed, 22 Aug 2018 21:00:28 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/009/</guid>
      <description>Administrar las hojas de sprites y las animaciones de pixel art dentro de Unity sin herramientas personalizadas es una pesadilla. Esto es lo que tiene que hacer solo para crear los assets para un solo personaje:
 Crea una textura (png) a través de un programa de pintura como Photoshop e importa un png en el proyecto de Unity. Establezca las configuraciones de importación deseadas para que la textura importada coincida con la misma configuración que ha utilizado para cada textura que haya importado.</description>
    </item>
    
    <item>
      <title>Estudio de UNET</title>
      <link>https://moonantonio.github.io/post/2018/dev/008/</link>
      <pubDate>Mon, 16 Jul 2018 17:18:59 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/008/</guid>
      <description>Esta entrada, es un recordatorio personal, despues de hablar con amigos y de hablarme tan bien de UNET (Yo solo toque NET en Unity 3.5, :S), me entro el gusanico de ver esta nueva tecnologia, por lo que decidi ponerme a investigar, pero descubri que hay muy poca información sobre esto.
Detallo en más profundidad, hay información, pero del High API. Lo que yo queria ver es información sobre el Low API y de esto hay poco, asi que decidi crear esta entrada para guardar como recuerdo este estudio, por si proximamente tengo que volver a mirarlo (soy un neurotico del guardado de datos xD).</description>
    </item>
    
    <item>
      <title>ScriptableObjects</title>
      <link>https://moonantonio.github.io/post/2018/dev/002/</link>
      <pubDate>Tue, 17 Apr 2018 14:04:47 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/002/</guid>
      <description>Los Objetos Scriptables son un tipo especial de objeto de datos en Unity. Tienen varios beneficios importantes, pero es posible que no funcionen de manera ideal para cada situación.
Introducción a los Objetos Scriptables Puede pensar en un objeto programable como un objeto destinado solo a contener datos. Si ha estado utilizando clases o estructuras tradicionales de C# para objetos simples solo de datos, podría utilizarlas en su lugar. Por supuesto, usted se estará preguntando &amp;ldquo;por qué&amp;rdquo; le gustaría usar un Objeto Scriptable.</description>
    </item>
    
    <item>
      <title>MonoBehavior en Unity</title>
      <link>https://moonantonio.github.io/post/2018/dev/001/</link>
      <pubDate>Sat, 10 Mar 2018 20:34:29 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/001/</guid>
      <description>Unity puede estar desperdiciando mucho rendimiento de la CPU simplemente llamando a sus funciones MonoBehaviour. Realmente no importa lo que estén haciendo tus scripts. Si tiene cientos o miles de ellos, hay que tener en cuenta que hay un nuevo campo de optimización.
Métodos mágicos Las llamadas a funciones MonoBehaviour son lentas. Estoy hablando de funciones como Update() , LateUpdate(), OnRender(), etc. Son los llamados métodos mágicos, y si estas familiarizado con los lenguajes de programación orientados a objetos, este concepto parece llamar a un método usando mecanismo de reflexión (la reflexión habilita llamadas de métodos incluso si no conoce la interfaz).</description>
    </item>
    
    <item>
      <title>Feliz 2018 y nuevas noticias con el</title>
      <link>https://moonantonio.github.io/post/2017/diario/010/</link>
      <pubDate>Tue, 09 Jan 2018 03:50:03 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/diario/010/</guid>
      <description>Empezamos el año con nuevas noticias De primeras, feliz año 2018 a los lectores, ^^. Queria traer estas noticias a principios de año, asique aqui las dejo.
Unity dejara de dar soporte para MonoDevelop-Unity a partir de la Unity 2018.1, esto quiere decir que en Unity 2018.1 no vendra con el IDE de MonoDevelop, ya que no admite muchas de las caracteristicas a las que esta migrando Unity con .</description>
    </item>
    
  </channel>
</rss>