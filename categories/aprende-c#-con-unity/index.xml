<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>aprende c# con unity - Categoría - N9&#43;</title>
        <link>https://ninpl.com/categories/aprende-c#-con-unity/</link>
        <description>aprende c# con unity - Categoría - N9&#43;</description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>nineplus.n9p@gmail.com (N9&#43;)</managingEditor>
            <webMaster>nineplus.n9p@gmail.com (N9&#43;)</webMaster><lastBuildDate>Tue, 04 Sep 2018 19:20:57 &#43;0200</lastBuildDate><atom:link href="https://ninpl.com/categories/aprende-c#-con-unity/" rel="self" type="application/rss+xml" /><item>
    <title>Aprende C# con Unity - Scriptable Objects</title>
    <link>https://ninpl.com/posts/2018/csharpunity/012/</link>
    <pubDate>Tue, 04 Sep 2018 19:20:57 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/012/</guid>
    <description><![CDATA[Los Objetos Scriptables son un tipo especial de objeto de datos en Unity. Tienen varios beneficios importantes, pero es posible que no funcionen de manera ideal para cada situación. En esta lección, cubriremos lo que son y cómo usarlos.
GitHubGitlabIntroducción a los Objetos Scriptables Puede pensar en un objeto programable como un objeto destinado solo a contener datos. Si ha estado utilizando clases o estructuras tradicionales de C# para objetos simples solo de datos, podría utilizarlas en su lugar.]]></description>
</item>
<item>
    <title>Aprende C# con Unity - Structs</title>
    <link>https://ninpl.com/posts/2018/csharpunity/011/</link>
    <pubDate>Sun, 26 Aug 2018 13:21:16 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/011/</guid>
    <description><![CDATA[Las estructuras son como Clases, pero completamente diferentes. Si no sabe qué es una estructura o cuándo la usaría, o si no conoce la diferencia entre pasar por referencia y pasar por valor, esta lección es para usted.
GitHubGitlabStructs en Unidad Dado que esta serie se basa en aprender C# para Unity, comencemos por señalar algunos lugares donde es posible que ya haya estado utilizando Structs:
Vector2, Vector3 and Vector4 Rect Color y Color32 Bounds Touch En particular, las diversas formas de Vector (2-4) se utilizan en todas partes.]]></description>
</item>
<item>
    <title>Aprende C# con Unity - Enums y Flags</title>
    <link>https://ninpl.com/posts/2018/csharpunity/010/</link>
    <pubDate>Sat, 25 Aug 2018 14:38:15 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/010/</guid>
    <description><![CDATA[Mencionamos brevemente los enums en nuestra última lección, por lo que sentí que ahora sería un buen momento para tratarla en mayor profundidad. Al mismo tiempo, podemos ampliar el tema e introducir Flags (máscaras de bits). Algo de esto se profundiza en el lado nerd de la programación, pero intentaré que todo sea fácil de entender.
GitHubGitlabEl tipo &ldquo;Enum&rdquo; Primero introduje la enumeración en la lección anterior con la configuración de &ldquo;Difficulties&rdquo;:]]></description>
</item>
<item>
    <title>Aprende C# con Unity - Guardando datos</title>
    <link>https://ninpl.com/posts/2018/csharpunity/009/</link>
    <pubDate>Fri, 24 Aug 2018 17:42:37 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/009/</guid>
    <description><![CDATA[Supongamos que estás haciendo un juego &ldquo;completo&rdquo;. Quieres una pantalla de título y todo. Su usuario puede seleccionar el número de jugadores o una configuración de dificultad, etc., y luego &hellip; ¿cómo pasa la información a la siguiente escena? O, lo que es más importante (y algo truculento) ¿cómo se puede guardar una sesión de juego y volver a cargarla más tarde? mostraré algunas de las opciones que me gustan.]]></description>
</item>
<item>
    <title>Aprende C# con Unity - Clases</title>
    <link>https://ninpl.com/posts/2018/csharpunity/008/</link>
    <pubDate>Fri, 24 Aug 2018 12:36:08 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/008/</guid>
    <description><![CDATA[Ya sea que lo recuerdes o no, has estado creando clases todo el tiempo en las lecciones anteriores. He comentado brevemente varias características de clases como herencia y constructores, pero hay mucho más por cubrir. En esta lección, nos enfocaremos en esos temas con mayor profundidad e introduciremos algunos temas más avanzados como polimorfismo, constructores estáticos, clases abstractas y clases estáticas.
GitHubGitlabHerencia La herencia es el concepto de que una clase toma todas las funcionalidades de una clase &ldquo;padre&rdquo; o &ldquo;base&rdquo; al mismo tiempo que brinda la oportunidad de ampliar o modificar la lógica previamente disponible.]]></description>
</item>
<item>
    <title>Aprende C# con Unity - Corrutinas</title>
    <link>https://ninpl.com/posts/2018/csharpunity/007/</link>
    <pubDate>Fri, 24 Aug 2018 02:48:35 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/007/</guid>
    <description><![CDATA[Una corrutina es una forma especial de hacer que la lógica suceda con el tiempo. Debo admitir que nunca usé corrutinas hasta Unity, había estado usando programación basada en eventos en cualquier otro escenario comparable. Sin embargo, corrutinas son una alternativa rápida y fácil que definitivamente vale la pena ver. En esta lección, mostraré cómo funciona Unity con corrutinas, incluidas varias formas de ceder el control e incluso vincular corrutinas para tener un control total sobre la lógica basada en el tiempo.]]></description>
</item>
<item>
    <title>Aprende C# con Unity - Genéricos</title>
    <link>https://ninpl.com/posts/2018/csharpunity/006/</link>
    <pubDate>Thu, 23 Aug 2018 02:40:43 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/006/</guid>
    <description><![CDATA[Los genéricos proporcionan una forma de hacer una especie de &ldquo;plantilla&rdquo; de su código que funciona de la misma manera en una variedad de tipos de datos diferentes. Si bien podría considerarse un tema más avanzado, existen algunos beneficios importantes al usarlos desde el principio. En esta lección, presentaré listas genéricas y diccionarios, y mostraré cómo se usan los genéricos para funcionalidades específicas de Unity, como obtener componentes y cargar recursos.]]></description>
</item>
<item>
    <title>Aprende C# con Unity - Bucles</title>
    <link>https://ninpl.com/posts/2018/csharpunity/005/</link>
    <pubDate>Thu, 23 Aug 2018 01:03:45 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/005/</guid>
    <description><![CDATA[Como programador, con frecuencia trabajará con un &ldquo;grupo&rdquo; de datos (como una matriz o array que presenté en la lección anterior). Tic Tac Toe, por ejemplo, tiene un tablero de 3 × 3 con nueve celdas totales. Si estuviera creando un método para operar en ese grupo de datos, como limpiar un tablero para un nuevo juego, no querría tener que aplicar manualmente los cambios a todos y cada uno de los valores de la matriz.]]></description>
</item>
<item>
    <title>Aprende C# con Unity - Métodos</title>
    <link>https://ninpl.com/posts/2018/csharpunity/004/</link>
    <pubDate>Sun, 19 Aug 2018 08:32:53 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/004/</guid>
    <description><![CDATA[La parte de &ldquo;acción&rdquo; de la programación proviene de &ldquo;llamar&rdquo; (también conocido como &ldquo;invocar&rdquo;) algo llamado &ldquo;método&rdquo; (también conocido como &ldquo;función&rdquo;). En esta lección aprenderemos cómo definir y llamar a nuestros propios métodos, y luego revisaremos algunos más que son especiales para Unity. Finalmente, crearemos nuestra propia demo de &ldquo;Magic 8 Ball&rdquo; y explicaremos cómo vincular un método con el clic de un botón y generar el resultado de una etiqueta.]]></description>
</item>
<item>
    <title>Aprende C# con Unity - Variables</title>
    <link>https://ninpl.com/posts/2018/csharpunity/003/</link>
    <pubDate>Sun, 19 Aug 2018 06:55:40 &#43;0200</pubDate>
    <author>N9&#43;</author>
    <guid>https://ninpl.com/posts/2018/csharpunity/003/</guid>
    <description><![CDATA[Si yo fuera un modelo de datos de una maquina, habría variables que me describirían incluyendo una para hacer referencia a mi nombre (un valor que no ha cambiado) y mi edad (un valor que cambia cada año). Algunas variables solo pueden ser determinadas por mí, como el nombre de mi película favorita, y otras pueden ser controladas total o parcialmente por fuentes externas, como mi estado civil. Todos estos tipos de relaciones se pueden modelar en código cuando conoces el vocabulario correcto.]]></description>
</item>
</channel>
</rss>
