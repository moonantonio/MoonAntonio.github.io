<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>dev - Categoría - Antonio Moon´s</title>
        <link>https://moonantonio.github.io/categories/dev/</link>
        <description>dev - Categoría - Antonio Moon´s</description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>antoniomt.moon@gmail.com (Antonio Moon)</managingEditor>
            <webMaster>antoniomt.moon@gmail.com (Antonio Moon)</webMaster><lastBuildDate>Fri, 03 May 2019 02:02:45 &#43;0200</lastBuildDate><atom:link href="https://moonantonio.github.io/categories/dev/" rel="self" type="application/rss+xml" /><item>
    <title>Uso de GUISkin para el estilo del editor</title>
    <link>https://moonantonio.github.io/posts/2019/dev/004/</link>
    <pubDate>Fri, 03 May 2019 02:02:45 &#43;0200</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2019/dev/004/</guid>
    <description><![CDATA[Al crear ventanas del editor de Unity con barras de herramientas, es posible que haya visto un par de formas diferentes de trabajar con los estilos de la barra de herramientas. Muchos de los ejemplos online o en paquetes de tiendas de activos crean estilos en código que ciertamente funcionan. Sin embargo, no he visto muchos ejemplos usando GUISkin para crear una GUI en el editor, así que pensé en compartir lo que aprendí experimentando con este método.]]></description>
</item>
<item>
    <title>Fases Importantes del desarrollo de un juego</title>
    <link>https://moonantonio.github.io/posts/2019/dev/003/</link>
    <pubDate>Mon, 25 Feb 2019 23:17:23 &#43;0100</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2019/dev/003/</guid>
    <description><![CDATA[Quiero analizar las diferentes etapas que componen la realización de un videojuego profesional. Si estás metido en el mundo del software entonces este proceso te resultará familiar debido a que es muy similar, exceptuando que los videojuegos requieren de grandes aportes creativos.
Fase de Concepción Todo comienza con una idea a partir de la cual se conformarán los aspectos fundamentales. Se determina el género o géneros del videojuego, cómo será el proceso de juego (gameplay), y también se constituye un guion gráfico (storyboard) en el que se tratan todo tipo de ideas preconcebidas que pueden ir adaptándose, como por ejemplo el estilo de los personajes, el ambiente, la música, etc.]]></description>
</item>
<item>
    <title>Shaders Cell Shading (Toon)</title>
    <link>https://moonantonio.github.io/posts/2019/dev/002/</link>
    <pubDate>Tue, 05 Feb 2019 14:38:50 &#43;0100</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2019/dev/002/</guid>
    <description><![CDATA[En post anteriores exploramos cómo podemos cambiar las propiedades físicas para simular diferentes materiales utilizando Surface Shaders. Un modelo de iluminación es responsable de tomar estas propiedades y calcular el tono final de cada píxel.
Comenzaremos con uno realmente simple sobre el que podemos construir, un modelo de iluminación de Lambert. Para ello, debemos saber que es la ley de Lambert.
Ley de Lambert La ley de Lambert trata sobre la iluminancia de una superficie situada a una cierta distancia de una fuente de luz.]]></description>
</item>
<item>
    <title>Personalizando nuestro editor - Unity</title>
    <link>https://moonantonio.github.io/posts/2019/dev/001/</link>
    <pubDate>Thu, 24 Jan 2019 13:28:38 &#43;0100</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2019/dev/001/</guid>
    <description><![CDATA[Un CustomEditor nos permite cambiar la representación visual de nuestras clases en el Unity Inspector. Hace más sencillo interactuar con las script clases asociadas a Gameobjects, prefabs, etc…
. . Nuestro primer paso es crear una carpeta con el nombre Editor. Para Unity es un nombre de carpeta muy especial, Unity carga automáticamente todos los scripts que modifican el comportamiento del UnityEditor desde esta carpeta. Estos scripts NO serán incluidos en el empaquetado final del juego, solo serán usado por el UnityEditor.]]></description>
</item>
<item>
    <title>Clase Abstracta VS Interfaces</title>
    <link>https://moonantonio.github.io/posts/2017/dev/025/</link>
    <pubDate>Fri, 16 Feb 2018 10:40:58 &#43;0100</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2017/dev/025/</guid>
    <description><![CDATA[El uso de clases abstractas y herencia para organizar la lógica de nuestras aplicaciones se puede sustituir o complementar con interfaces y métodos de extensión usando C#. En este artículo veremos un ejemplo de ambas aproximaciones así como sus ventajas e inconvenientes.
Clases Abstractas Las clases abstractas nos permiten tener una clase base con cierta funcionalidad común ya implementada, sobre la que podemos heredar y especificar algunos métodos. Para este ejemplo, la clase Transporte implementa el método Mover, y las clases Coche y Bicicleta especifican el número de ruedas.]]></description>
</item>
<item>
    <title>MVC simplificado</title>
    <link>https://moonantonio.github.io/posts/2017/dev/014/</link>
    <pubDate>Tue, 07 Nov 2017 22:18:34 &#43;0100</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2017/dev/014/</guid>
    <description><![CDATA[Los programadores principiantes generalmente comienzan a aprender el oficio con el Hello World. A partir de ahí, sin un patrón de diseño, se suele aumentar sin ninguna metodología los proyectos y terminan siendo un caos. Cada nuevo desafío lleva a casa una lección importante:
Cuanto más grande es el proyecto, más grande es el espagueti.
Snake Es fácil ver que en equipos grandes o pequeños, uno no puede hacer imprudentemente lo que le plazca.]]></description>
</item>
<item>
    <title>Sistema Gambits</title>
    <link>https://moonantonio.github.io/posts/2017/dev/013/</link>
    <pubDate>Tue, 03 Oct 2017 21:24:19 &#43;0200</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2017/dev/013/</guid>
    <description><![CDATA[El sistema gambit, es un sistema que controla el comportamiento o acciones de un agente. Este agente tiene unas listas de prioridades en las que tiene comportamientos o acciones. El agente siempre accionara iteradamente su acción, siempre y cuando cumpla la condición, sino, pasara a la siguiente acción en la lista.
¿Dónde y por qué se necesitó crear el sistema gambit? En 1991, Square Soft, una desarrolladora de videojuegos famosa por sus sagas jrpg, necesitaba generar una serie de patrones para sus enemigos en su juego FF IV.]]></description>
</item>
<item>
    <title>Investigación Generación</title>
    <link>https://moonantonio.github.io/posts/2017/dev/012/</link>
    <pubDate>Fri, 25 Aug 2017 22:40:40 &#43;0200</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2017/dev/012/</guid>
    <description><![CDATA[Generación de contenido procedural - Básico ¿Qué es el PCG? Aquí debo comenzar diciendo que en realidad una definición certera y aceptada por toda la academia no existe, es por eso que voy a mencionar diversas definiciones que obtuve de las referencias en las que me base:
El PCG es la creación algorítmica de contenido de un juego, con entrada de información limitada o indirecta por parte del usuario. El PCG es la generación programática de contenido de un juego, utilizando un proceso aleatorio o pseudo aleatorio que da como resultado un rango impredecible de posibles espacios de juego.]]></description>
</item>
<item>
    <title>Comandos fundamentales de Windows</title>
    <link>https://moonantonio.github.io/posts/2017/dev/011/</link>
    <pubDate>Thu, 27 Jul 2017 19:35:28 &#43;0200</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2017/dev/011/</guid>
    <description><![CDATA[Diferentes comandos útiles y básicos Cat Cat (de concatenar), es una maravillosa utilidad que nos permite visualizar el contenido de un archivo de texto sin la necesidad de un editor. Para utilizarlo solo debemos mencionarlo junto al archivo que deseamos visualizar. $ cat prueba.txt Ls Ls (de listar), permite listar el contenido de un directorio o fichero. El comando ls tiene varias opciones que permiten organizar la salida, lo que resulta particularmente útil cuando es muy grande.]]></description>
</item>
<item>
    <title>Investigación RPG-Táctico</title>
    <link>https://moonantonio.github.io/posts/2017/dev/005/</link>
    <pubDate>Wed, 26 Apr 2017 20:39:00 &#43;0200</pubDate>
    <author>Antonio Moon</author>
    <guid>https://moonantonio.github.io/posts/2017/dev/005/</guid>
    <description><![CDATA[¿Qué se considera combate táctico? Supernova La definición de combate, es aquella situación en la que dos o más personajes interactúan entre sí con el objetivo de reducir al otro. En sí mismo un combate no tiene por qué ser necesariamente la representación directa de un enfrentamiento físico, también puede ser una batalla dialéctica.
El concepto de turno de combate se puede definir como “sucesión de momentos en los que los personajes actúan, que pueden ser calculado de antemano y no dependen de factores externos o aleatorios que no estén incluidos dentro del propio combate”.]]></description>
</item>
</channel>
</rss>
